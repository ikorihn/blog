{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/2021/06/fish-history-to-zsh-history/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ikorihn Blog"}},"markdownRemark":{"id":"163e15c9-69cd-5aaf-a5ac-65393cb795e8","excerpt":"一年くらいfishを使っていたが、文法があまりにbash/zshと異なり辛いため、zshに戻すことにした。\nコマンド履歴に頼る人間なので、直近1年の履歴がなくなってしまうのは困る。\nそこでfishのhistoryファイルをzshのhistory…","html":"<p>一年くらいfishを使っていたが、文法があまりにbash/zshと異なり辛いため、zshに戻すことにした。\nコマンド履歴に頼る人間なので、直近1年の履歴がなくなってしまうのは困る。\nそこでfishのhistoryファイルをzshのhistoryファイルに移行することにした。</p>\n<div class=\"gatsby-highlight\" data-language=\"toc\"><pre class=\"language-toc\"><code class=\"language-toc\"># This code block gets replaced with the TOC</code></pre></div>\n<h2 id=\"移行ツール\">移行ツール</h2>\n<p>移行するためのツールを作った。</p>\n<p><a href=\"https://github.com/r57ty7/zhistconv\">https://github.com/r57ty7/zhistconv</a></p>\n<p>使い方</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># fish_hisoryをzsh_historyに変換して追記(事前にバックアップを取ることを推奨)</span>\n$ zhistconv fish fish_hist <span class=\"token operator\">>></span> ~/.zsh_history\n$ <span class=\"token function\">history</span> -E <span class=\"token number\">1</span>\n<span class=\"token operator\">=</span><span class=\"token operator\">></span> 結合されたhistoryが表示される</code></pre></div>\n<p>以下詳細</p>\n<h2 id=\"fishのhistoryファイルをzshのhistoryファイルの形式に変換する\">fishのhistoryファイルをzshのhistoryファイルの形式に変換する</h2>\n<h3 id=\"fishのhistoryファイル\">fishのhistoryファイル</h3>\n<p><code class=\"language-text\">~/.local/share/fish/fish_history</code></p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cmd</span><span class=\"token punctuation\">:</span> echo hello\n  <span class=\"token key atrule\">when</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1621067042</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cmd</span><span class=\"token punctuation\">:</span> git pull\n  <span class=\"token key atrule\">when</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1621067359</span></code></pre></div>\n<p>yaml形式で保存されているので、yamlをロードして変換してあげればいい</p>\n<h3 id=\"zshのhistoryファイル\">zshのhistoryファイル</h3>\n<p><code class=\"language-text\">~/.zsh_history</code></p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">: 1621066935:0;echo hello\n: 1621066935:0;cd</code></pre></div>\n<p><code class=\"language-text\">: &lt;unix timestamp>:0:&lt;command></code> 形式(真ん中の0が何を意味しているかは調べてない)</p>\n<h2 id=\"zshのマルチバイト文字の扱いについて\">zshのマルチバイト文字の扱いについて</h2>\n<p>一つ問題があった。移行ツールをわざわざ作ったのはほとんどこの仕様のため</p>\n<p><code class=\"language-text\">~/.zsh_history</code> をUTF-8で開くと、日本語が文字化けしていた。\nhistoryコマンドの結果は文字化けしていない。</p>\n<p>どうやらマルチバイト文字が特殊な扱いをされているらしい。</p>\n<p><a href=\"https://syossan.hateblo.jp/entry/2017/10/09/181928\">.zsh_historyにおける非ASCII文字の扱いについて - 生涯未熟</a>\n<a href=\"https://github.com/dvorka/hstr/pull/416\">unmetafy unicode when zsh by rogerdehe · Pull Request #416 · dvorka/hstr</a></p>\n<p>metafy/unmetafyという処理をしているらしく、\nメタなバイトがあったら直前に <code class=\"language-text\">0x83</code> を挿入して、<code class=\"language-text\">0x20</code>とのxorを取り6bit目を反転させているようだ。</p>\n<p><a href=\"https://github.com/zsh-users/zsh/blob/master/Src/utils.c#L4921-L4933\">https://github.com/zsh-users/zsh/blob/master/Src/utils.c#L4921-L4933</a></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">mod_export <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">unmetafy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>t<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> Meta<span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>t <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>t<span class=\"token operator\">++</span> <span class=\"token operator\">==</span> Meta <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\n\t    t<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span> <span class=\"token operator\">^</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">*</span>len <span class=\"token operator\">=</span> t <span class=\"token operator\">-</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>単純にfish_historyを変換してzsh_historyに貼り付けるだけでは、日本語部分が文字化けしてしまう。</p>\n<h3 id=\"文字化けしたzsh_historyファイルを読めるようにする\">文字化けしたzsh_historyファイルを読めるようにする</h3>\n<p><code class=\"language-text\">ぁあぃいぅうぜそぞただちぢっつづ</code> という文字列を使って調べていく。\nこれらは頭2バイトが <code class=\"language-text\">e381</code>、末尾1バイトがそれぞれいかのようになる。</p>\n<ul>\n<li><code class=\"language-text\">ぁ</code>: <code class=\"language-text\">81</code></li>\n<li><code class=\"language-text\">あ</code>: <code class=\"language-text\">82</code></li>\n<li><code class=\"language-text\">ぃ</code>: <code class=\"language-text\">83</code></li>\n<li><code class=\"language-text\">い</code>: <code class=\"language-text\">84</code></li>\n<li><code class=\"language-text\">ぅ</code>: <code class=\"language-text\">85</code></li>\n<li><code class=\"language-text\">う</code>: <code class=\"language-text\">86</code></li>\n<li><code class=\"language-text\">ぜ</code>: <code class=\"language-text\">9c</code></li>\n<li><code class=\"language-text\">そ</code>: <code class=\"language-text\">9d</code></li>\n<li><code class=\"language-text\">ぞ</code>: <code class=\"language-text\">9e</code></li>\n<li><code class=\"language-text\">た</code>: <code class=\"language-text\">9f</code></li>\n<li><code class=\"language-text\">だ</code>: <code class=\"language-text\">a0</code></li>\n<li><code class=\"language-text\">ち</code>: <code class=\"language-text\">a1</code></li>\n<li><code class=\"language-text\">ぢ</code>: <code class=\"language-text\">a2</code></li>\n<li><code class=\"language-text\">っ</code>: <code class=\"language-text\">a3</code></li>\n<li><code class=\"language-text\">つ</code>: <code class=\"language-text\">a4</code></li>\n<li><code class=\"language-text\">づ</code>: <code class=\"language-text\">a5</code></li>\n</ul>\n<p>zsh_historyで見ると以下のようなバイト列になっている(わかりやすいよう適宜スペースを入れている)</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">E38181 E38182 E38183A3 E38183A4 E38183A5 E38183A6 E38183BC E38183BD E38183BE E38183BF E3818380 E3818381 E3818382 E381A3 E381A4 E381A5</code></pre></div>\n<p>zsh_historyの文字コードはlatin1なのでほぼUTF-8と同じ。\n文字コード表をもとに当てはまる文字に戻すと、 <code class=\"language-text\">0x83-0xA2</code> のとき、直前に <code class=\"language-text\">0x83</code> を入れてから6bit目を反転させていることがわかる。</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">E38181 E38182 E38183A3 E38183A4 E38183A5 E38183A6 E38183BC E38183BD E38183BE E38183BF E3818380 E3818381 E3818382 E381A3 E381A4 E381A5</code></pre></div>\n<p><code class=\"language-text\">0x83</code> を消して、直後の6bit目を反転させると以下のようになる</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">E38181 E38182 E38183 E38184 E38185 E38186 E3819C E3819D E3819E E3819F E381A0 E381A1 E381A2 E381A3 E381A4 E381A5</code></pre></div>\n<p>これがもとの文字列のバイト列に一致する。</p>\n<p>マルチバイト文字をzsh_historyの形式に変換するには上と逆のことをすればいい。\nつまり、<code class=\"language-text\">0x83-0xA2</code> のとき、直前に <code class=\"language-text\">0x83</code> を入れてから6bit目を反転させる。</p>\n<h3 id=\"goでzsh_historyをパースするプログラムを書いてみる\">Goでzsh_historyをパースするプログラムを書いてみる</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> zhistconv\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\">// zsh_historyの仕様で、各バイトが0x83~0xA2のとき、その前に0x83を入れて6bit目を反転させる</span>\n\tx83 <span class=\"token operator\">=</span> <span class=\"token number\">131</span>\n\txA2 <span class=\"token operator\">=</span> <span class=\"token number\">162</span>\n\tx20 <span class=\"token operator\">=</span> <span class=\"token number\">32</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">ParseZshHistory</span><span class=\"token punctuation\">(</span>latin1Byte <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">{</span>\n\tisMarking <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token keyword\">var</span> byteBuffer <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> codePoint <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> latin1Byte <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> codePoint <span class=\"token operator\">==</span> x83 <span class=\"token punctuation\">{</span>\n\t\t\tisMarking <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> isMarking <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// 6bit目を反転させるために0x20をXORする</span>\n\t\t\tinvertCodePoint <span class=\"token operator\">:=</span> codePoint <span class=\"token operator\">^</span> x20\n\t\t\tbyteBuffer <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>byteBuffer<span class=\"token punctuation\">,</span> invertCodePoint<span class=\"token punctuation\">)</span>\n\t\t\tisMarking <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tbyteBuffer <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>byteBuffer<span class=\"token punctuation\">,</span> codePoint<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> byteBuffer\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">ConvertToZshHistory</span><span class=\"token punctuation\">(</span>latin1Byte <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> byteBuffer <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> codePoint <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> latin1Byte <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 131は0metacharの10進数表現</span>\n\t\t<span class=\"token keyword\">if</span> x83 <span class=\"token operator\">&lt;=</span> codePoint <span class=\"token operator\">&amp;&amp;</span> codePoint <span class=\"token operator\">&lt;=</span> xA2 <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// 6bit目を反転させるために0x20をXORする</span>\n\t\t\tinvertCodePoint <span class=\"token operator\">:=</span> codePoint <span class=\"token operator\">^</span> x20\n\t\t\tbyteBuffer <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>byteBuffer<span class=\"token punctuation\">,</span> x83<span class=\"token punctuation\">)</span>\n\t\t\tbyteBuffer <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>byteBuffer<span class=\"token punctuation\">,</span> invertCodePoint<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tbyteBuffer <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>byteBuffer<span class=\"token punctuation\">,</span> codePoint<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> byteBuffer\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"作ったツールについて\">作ったツールについて</h2>\n<p><a href=\"https://github.com/urfave/cli\">urfave/cli: A simple, fast, and fun package for building command line apps in Go</a></p>\n<p>こちらを使ってcliツールを作った。</p>\n<ul>\n<li><code class=\"language-text\">zhistconv fish</code>: fish_historyをzsh_historyの形式に変換して標準出力する</li>\n<li><code class=\"language-text\">zhistconv parse</code>: zsh_historyをUTF-8に変換する</li>\n<li><code class=\"language-text\">zhistconv reverse</code>: UTF-8で書かれたzsh_historyのマルチバイト文字をzsh_historyの仕様に変換する</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E7%A7%BB%E8%A1%8C%E3%83%84%E3%83%BC%E3%83%AB\">移行ツール</a></p>\n</li>\n<li>\n<p><a href=\"#fish%E3%81%AEhistory%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92zsh%E3%81%AEhistory%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%BD%A2%E5%BC%8F%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B\">fishのhistoryファイルをzshのhistoryファイルの形式に変換する</a></p>\n<ul>\n<li><a href=\"#fish%E3%81%AEhistory%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\">fishのhistoryファイル</a></li>\n<li><a href=\"#zsh%E3%81%AEhistory%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\">zshのhistoryファイル</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#zsh%E3%81%AE%E3%83%9E%E3%83%AB%E3%83%81%E3%83%90%E3%82%A4%E3%83%88%E6%96%87%E5%AD%97%E3%81%AE%E6%89%B1%E3%81%84%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">zshのマルチバイト文字の扱いについて</a></p>\n<ul>\n<li><a href=\"#%E6%96%87%E5%AD%97%E5%8C%96%E3%81%91%E3%81%97%E3%81%9Fzsh_history%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E8%AA%AD%E3%82%81%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\">文字化けしたzsh_historyファイルを読めるようにする</a></li>\n<li><a href=\"#go%E3%81%A7zsh_history%E3%82%92%E3%83%91%E3%83%BC%E3%82%B9%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%82%92%E6%9B%B8%E3%81%84%E3%81%A6%E3%81%BF%E3%82%8B\">Goでzsh_historyをパースするプログラムを書いてみる</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">作ったツールについて</a></p>\n</li>\n</ul>","frontmatter":{"title":"fishのhistoryをzshに移行する","date":"June 08, 2021","description":""}},"previous":null,"next":{"fields":{"slug":"/2021/06/zplug-to-zinit/"},"frontmatter":{"title":"zplugをzinitに移行する"}}},"pageContext":{"id":"163e15c9-69cd-5aaf-a5ac-65393cb795e8","previousPostId":null,"nextPostId":"f05f60e0-9f93-5f25-8801-5d7a7b8d7dc3"}},
    "staticQueryHashes": ["1857159792","984448874"]}